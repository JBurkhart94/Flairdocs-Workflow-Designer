@model Flairdocs_Workflow_Designer.Models.Workflow


<div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="design:'sidebar', gutters:false, liveSplitters:true" id="borderContainer">



    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="splitter:true, region:'top'" style="width: 100px; overflow-y: auto">
        <div id="flairdocs-banner">
            <img src="~/Content/flairsoft-logo.png" alt="Flairdocs" />
        </div>
        <div id="workflow-designer-top-wrapper">
            <div id="workflow-designer-menu">
                <select class="workflow-live-search" data-placeholder="Search Workflow">
                    <option></option>
                    @{
                        foreach (string title in ViewBag.Titles)
                        {
                            <option>@title</option>
                        }
                    }
                </select>
                <button id="open-workflow-button" type="button"><span class="glyphicon glyphicon-folder-open"></span>Open Workflow</button>
                <button id="create-workflow-button" type="button"><span class="glyphicon glyphicon-plus"></span>Create Workflow</button>
                <button id="workflow-audit-log-button" type="button"><span class="glyphicon glyphicon-list-alt"></span>Audit Log</button>
                <button id="workflow-settings-button" type="button"><span class="glyphicon glyphicon-cog"></span>Workflow Settings</button>
                <div id="workflow-description">
                    <i>@Model.Description</i>
                </div>
            </div>
            <div id="workflow-designer-window">
                <div id="workflow-designer-window-buttons">
                    <div id="add-reviewer-button"><span class="glyphicon glyphicon-move"></span>Drag to add Reviewer</div>
                    <button id="save-workflow-button" type="button"><span class="glyphicon glyphicon-floppy-disk" onclick="'@Url.Action("Save", "Home")'"></span>Save</button>
                </div>
                <div id="workflow-designer-window-edit">
                    @{
                        if (Model.Steps.Count() == 0)
                        {
                            <div class="workflow-step" value="00000000-0000-0000-0000-000000000000">
                                <ul class="reviewer-list ui-sortable">
                                    <li class="reviewer" value="00000000-0000-0000-0000-000000000000"><button type="button" class="remove-reviewer-button">X</button>Admin</li>
                                </ul>
                            </div>
                            <div class="add-step glyphicon glyphicon-chevron-right"></div>
                        }
                        else
                        {
                            foreach (var step in Model.Steps)
                            {
                                <div class="workflow-step" value="@step.Id">
                                    <ul class="reviewer-list ui-sortable">
                                        @foreach(var reviewer in step.Reviewers){
                                            <li class="reviewer" value="@reviewer.Id"><button type="button" class="remove-reviewer-button">X</button>@reviewer.Role</li>
                                        }
                                    </ul>
                                </div>
                                <div class="add-step glyphicon glyphicon-chevron-right"></div>
                            }

                        }
                    }

                </div>
            </div>
        </div>
    </div>







    <div id="slider" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="splitter:true, region:'center'">
        
    </div>
</div>

<style>
    html, body {
        width: 100%;
        height: 100%;
        margin: 0;
    }

    #borderContainer {
        width: 100%;
        height: 100%;
        overflow: auto;
    }

    #workflow-description {
        width: 170px;
        margin-left: auto;
        margin-right: auto;
        margin-top: 15px;
        max-height: 100px;
        overflow: auto;
        font-weight: 100;
    }

    .reviewer-list{
        padding: 0px;
        margin-left: 1px;
        min-width: inherit;
        max-width: inherit;
        min-height: inherit;
        text-decoration: none;
    }

        .reviewer {
            line-height: 1.7;
            word-wrap: break-word;
            text-align: center;
            min-width: 200px;
            max-width: 200px;
            min-height: 60px;
            border-radius: 15px;
            margin-left: auto;
            margin-right: auto;
            padding-left: 6px;
            padding-right: 6px;
            padding-bottom: 14px;
            margin-top: 8px;
            background-color: #5697ff;
            color: white;
            list-style-type: none;
        }

        .reviewer:hover {
            cursor: move;
        }

    .remove-reviewer-button {
        display: block;
        margin-left: 169px;
        background-color: #5697ff;
        color: white;
        border-radius: 15px;
        border: none;
    }

    .remove-reviewer-button:active{
        color: grey;
    }
</style>

@Html.Partial("WorkflowScriptCommon")

<script>
    //Number of steps used for auto-scrolling feature
    var steps = @Model.Steps.Count();

    //Keep track of the amount of saves for enabling/disabling the save button
    var numOfSavesInProgress = 0;
    var inProgress = false;

    function setup_drag_and_drop() {
        $('.reviewer-list').droppable({
            accept: '#add-reviewer-button',
            drop: function (event, ui) {
                $(this).append('<li class="reviewer" value="00000000-0000-0000-0000-000000000000"><button type="button" class="remove-reviewer-button">X</button>Admin</li>')
                    .promise().done(function () {
                        $('.remove-reviewer-button').click(function () { remove_reviewer($(this.parentElement)); });
                    });
                $('.reviewer').off('click');
                $('.reviewer').click(function () { display_reviewer($(this)); });
            }
        });
        $('.reviewer-list').sortable({
            connectWith: '.reviewer-list',
        });
        $('.remove-reviewer-button').click(function () { remove_reviewer($(this.parentElement)); });

    }
    //Set up JavaScript event handlers
    $(document).ready(function () {
        //Create a workflow step
        $('.add-step').click(add_step);
        //Save a workflow
        $('#save-workflow-button').click(save_workflow);
        //Make the drag-to-add reviewer draggable
        $('#add-reviewer-button').draggable({
            helper: function () {
                return $('<li class="reviewer" value="00000000-0000-0000-0000-000000000000"><button type="button" class="remove-reviewer-button">X</button>Admin</li>');
            }
        });
        setup_drag_and_drop();
        //Display reviewer information when clicked
        $('.reviewer').click(function () { display_reviewer($(this)); });
    });

    function remove_reviewer(el){
        swal({
            title: 'Are you sure?',
            text: "The selected reviewer will be deleted!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then(function () {
            console.log(el);
            xhttp = new XMLHttpRequest();
            xhttp.open("POST", '@Url.Action("RemoveReviewer", "Home")?reviewerId=' + el.attr('value'), true)
            xhttp.send();
            xhttp.onreadystatechange = function () {
                el.remove();
            }
        })
    }

    /*
        Function to save the current workflow.  The method will use AJAX to save the current state of the workflow.  During the
        save process the save button should be disabled to prevent flooding the server with multiple save requests on the same
        unsaved state.  When the workflow is saved, the corresponding GUI elements on the page should be updated to reflect the
        state of the database.
    */
    function save_workflow() {
        disable_button($('#save-workflow-button'));
        //Update the number of saves in progress, the save button will be re-enabled once this returns to 0.
        updateSavesInProgress($('.workflow-step').length);
        $('.workflow-step').each(function (index) {
            var step = $(this);
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", '@Url.Action("SaveStep", "Home")?workflowId=@Model.Id' + "&stepId=" + $(this).attr('value') + "&order=" + index, true);
            xhttp.send();
            xhttp.onreadystatechange = function () {
                if (xhttp.readyState == 4 && xhttp.status == 200) {
                    step.attr('value', xhttp.response);
                    console.log(step.find('li'));

                    //Now consider all reviewers within a step
                    updateSavesInProgress(step.find('li').length);
                    var stepId = xhttp.response;
                    step.find('li').each(function (reviewer_index) {
                        var reviewer = $(this);
                        var xhttp_reviewer = new XMLHttpRequest();
                        xhttp_reviewer.open("POST", '@Url.Action("SaveReviewer", "Home")?stepId=' + stepId + "&reviewerId=" + reviewer.attr('value') + "&order=" + reviewer_index, true);
                        xhttp_reviewer.send();
                        xhttp_reviewer.onreadystatechange = function () {
                            if (xhttp_reviewer.readyState == 4 && xhttp_reviewer.status == 200) {
                                reviewer.attr('value', xhttp_reviewer.response);
                                reviewer.promise().done(function () {
                                    setTimeout(function () { updateSavesInProgress(-1) }, 10);
                                })
                            }
                        }
                    });
                    step.promise().done(function () {
                        setTimeout(function () { updateSavesInProgress(-1) }, 10);
                    });
                }
            }
        });
    }

    /*
        Function to add a new step to the current workflow.  By default the step will have a value equivalent to the value of an Empty GUID.
        Also, the workflow-designer-window-edit should be auto-scrolled to the end.
    */
    function add_step(e) {
        //Update number of steps
        steps += 1;
        //Create new step with Empty GUID value.
        var code = '<div class="workflow-step" value="00000000-0000-0000-0000-000000000000"><ul class="reviewer-list"><li class="reviewer" value="00000000-0000-0000-0000-000000000000"><button type="button" class="remove-reviewer-button">X</button>Admin</li></ul></div ><div class="add-step glyphicon glyphicon-chevron-right"></div>';

        //Insert this new step before the add step button
        $(code).insertAfter(this);

        //Set up add step button for the new step as well as drag and drop for reviewers
        resetAddStep();
        setup_drag_and_drop();
    }

    /*
        Function to keep track of the number of saves in progress.  This function acts as a synchronization function on the save button
        while still allowing the AJAX to perform asynchronously for saving the workflow.
    */
    function updateSavesInProgress(count) {
        numOfSavesInProgress += count;
        if (numOfSavesInProgress > 0) {
            disable_button($('#save-workflow-button'));
        } else {
            enable_button($('#save-workflow-button'));
        }
    }

    /*
        Function resets the add step buttons so the new add step is registered but the others don't register
        multiple events (and add multiple steps when clicked)
    */
    function resetAddStep() {
       $('.add-step').off('click');
       $('.add-step').click(add_step);
    }

    function disable_button(button) {
        button.prop("disabled", true);
        button.css("background-color", "#cecece");
    }

    function enable_button(button) {
        button.prop("disabled", false);
        button.css("background-color", "#5697ff");
    }

    function display_reviewer(el) {
        $("#slider").empty();
        var id = el.attr("value");
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", '@Url.Action("GetReviewer", "Home")?reviewerId=' + id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            var reviewer = xhttp.response;
            console.log("Reviewer is null: " + (reviewer == null));
            console.log("Reviewer Id: " + reviewer.Id)
            if (reviewer.Id != null) {
                code = '<h1>Reviewer Information</h1><div>ID: ' + reviewer.Id + '</div><div>Role: ' + reviewer.Role + '</div>';
                $("#slider").html(code);
            }
            else {
                code = '<h1>Reviewer Information</h1><div>ID: Not yet assigned</div><div>Role: ' + reviewer.Role + '</div>';
                $("#slider").html(code);
            }
        }
    }

</script>
